---
- name: Create and configure a Proxmox VM with Ubuntu Server using cloud-init
  hosts: proxmox15
  gather_facts: no
  vars:
    proxmox_host: "10.131.9.150"  # Proxmox host IP
    vm_id: 403
    vm_name: "Ubuntu-VM"
    vm_storage: "CephStorage"  # Replace with your Proxmox storage name
    iso_storage: "cephfs"
    iso_image: "ubuntu-24.04.1-live-server-amd64.iso"  # ISO file path
    cloudinit_storage: "CephStorage"
    vm_disk_size: "32G"
    vm_memory: 2048
    vm_cores: 2
    vm_net_bridge: "vmbr1"  # Network bridge in Proxmox
    user_name: "user"
    user_password: "password" 
    filename: "vm-{{ vm_id }}-disk-0"
    ssh_key: "ssh-ed25519%20AAAAC3NzaC1lZDI1NTE5AAAAIOEUhBbR8H/oNlEmoh56VNb4UwBqZKRVxZXL3FNDW/Jd%20semaphore@ansible"

  tasks:
    - name: Ensure 'pip3' is installed
      ansible.builtin.command: which pip3
      register: pip3_check
      failed_when: false

    - name: Install 'pip3' if missing (Debian/Ubuntu)
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: yes
      when: pip3_check.rc != 0 and ansible_facts['os_family'] == "Debian"

    - name: Install 'pip3' if missing (CentOS/RHEL)
      ansible.builtin.yum:
        name: python3-pip
        state: present
      when: pip3_check.rc != 0 and ansible_facts['os_family'] == "RedHat"  

    - name: Ensure 'proxmoxer' Python library is installed
      ansible.builtin.command: "pip3 show proxmoxer"
      register: proxmoxer_check
      failed_when: false

    - name: Install 'proxmoxer' if not already present
      ansible.builtin.command:
        cmd: "pip3 install proxmoxer --break-system-packages"
      when: proxmoxer_check.rc != 0
      register: proxmoxer_installation
      failed_when: proxmoxer_installation.rc != 0

    - name: Create VM with qm command
      command: >
        qm create {{ vm_id }} 
        --name {{ vm_name }} 
        --memory {{ vm_memory }} 
        --cores {{ vm_cores }} 
        --net0 virtio,bridge={{ vm_net_bridge }} 
        --ide2 {{ iso_storage }}:iso/{{ iso_image }},media=cdrom 
        --scsi0 {{ vm_storage }}:{{ filename }},size={{ vm_disk_size }} 
        --boot order=ide2;scsi0 
        --ostype l26 
        --onboot 1
      register: vm_creation

    - name: Check if VM creation was successful
      debug:
        msg: "VM {{ vm_name }} created successfully"
      when: vm_creation.rc == 0

    - name: Attach Cloud-Init to the VM
      command: >
        qm set {{ vm_id }} 
        --ciuser {{ user_name }} 
        --cipassword {{ user_password }} 
        --ipconfig0 ip=dhcp
        --ide1 {{ cloudinit_storage }}:cloudinit
        --sshkey {{ ssh_key }}
      when: vm_creation.rc == 0

    - name: Start the VM
      command: qm start {{ vm_id }}
      when: vm_creation.rc == 0

    - name: Wait for the VM to be accessible via SSH
      wait_for:
        host: "{{ vm_name }}"
        port: 22
        delay: 10
        timeout: 300
      delegate_to: localhost

    - name: Retrieve the VM IP address
      command: qm guest cmd {{ vm_id }} network-get-interfaces
      register: vm_ip_info
      when: vm_creation.rc == 0

    - name: Set VM IP Address from DHCP
      set_fact:
        vm_ip: "{{ vm_ip_info.stdout | from_json | selectattr('name', 'equalto', 'eth0') | map(attribute='ip-addresses') | first | first }}"
      when: vm_ip_info.rc == 0

    - name: Output the VM IP address
      debug:
        msg: "The VM IP address is {{ vm_ip }}"
      when: vm_ip is defined
